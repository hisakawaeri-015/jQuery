-----------------------------------------------------------------------
※DOMを利用してHTML要素を取得すること
※DOM操作（取得・変更・追加・削除・表示・非表示）を行うこと
例えば、Twitterにログインをするときに誤ったメールアドレスやパスワードを入力すると、エラーメッセージが表示されます。
これはDOMを利用して、エラーメッセージを表示するためのHTML要素をプログラムから生成・追加しています。このような処理をDOM操作といいます。
→jQueryに用意された便利なメソッドを使って、簡単にDOM操作を行う方法
-----------------------------------------------------------------------
DOMを利用してHTML要素を取得するには、以下のように記述します。
// タグ指定で取得（pタグ）
$('p')

// id指定で取得（hogeId）
$('#hogeId')

// class指定で取得（hoge-class）
$('.hoge-class')

// name指定で取得（hoge-name）
$('[name="hoge-name"]')
-------------------------------------------------
↑jQueryでのDOMの取得方法
↓取得したDOMに対してどんな操作をするか
-----------------------------------------------------------
★text()メソッド：要素内のテキストを取得・変更する
★append()メソッド：要素を追加する
★remove()メソッド：要素を削除する
★show()メソッド：要素を表示する
★hide()メソッド：要素を非表示にする
★text()メソッド：要素内のテキストを取得・変更する
★append()メソッド：要素を追加する
-----------------------------------------------
★復習になりますが、特定のHTML要素内のテキストを取得・変更するにはtext()メソッドを使います。
 $(function() {
   const p = $('p').text();
   console.log(p);
 });
↑pタグ内のテキストがコンソールに表示される
次に、HTMLファイルを編集しなくてもjQueryのtext()メソッドでテキストを変更できることを確認してみましょう。
$(function() {
   $('p').text('jQueryを勉強しよう');
});
text()メソッドでテキストを変更できていることがわかります。
text()メソッドを使えば、HTML要素内のテキストをあとから自由に変更できるということです。
----------------------------------------------------------------------------------------
★append()メソッドを使えば、指定要素の末尾にHTML要素を追加できます。
$(セレクタ).append(要素);
↓こんなHTMLがあったとする(ボタンを押したらリストの末尾に文字を追加)
   <p>DOM操作を理解しよう</p>
   <button id="append">append</button>
   <ul>
     <li>Python</li>
     <li>Ruby</li>
     <li>PHP</li>
   </ul>
↓js
$(function() {
   //変数の初期化
   let num = 0;
 
   // id属性がappendの要素がクリックされたら要素を追加
   $('#append').on('click', function(){
     // numを1ずつ増やす
     num++;
     $('ul').append('<li>appendで追加' + num + '</li>');
   });
});
※appendと類似のメソッド
append()	指定した要素内の末尾に追加する
prepend()	指定した要素内の先頭に追加する
after()	指定した要素の次に追加する
before()	指定した要素の前に追加する
---------------------------------------------
★remove()メソッド：要素を削除する

↓こんなHTMLがあったとする(ボタンを押したらリストの末尾の文字を削除)
  <button id="remove">remove</button>
  <ul>
    <li>Python</li>
    <li>Ruby</li>
    <li>PHP</li>
  </ul>


$(セレクタ).remove();
   // id属性がremoveの要素がクリックされたら末尾要素を削除
   $('#remove').on('click', function(){
     num--;
     $('li:last').remove();
 
     // 要素がなくなったら変数を0にする
     if(num < 0){
       num = 0;
     }
   });
});
-----------------------------------------------------------
show()メソッド：要素を表示する
hide()メソッド：要素を非表示にする

↓こんなHTMLがあったとする
「hide」ボタンをクリックすると要素が非表示になり、「show」ボタンをクリックすると要素が表示される
<body>
   <button id="append">append</button>
   <button id="remove">remove</button>
   <button id="show">show</button>
   <button id="hide">hide</button>
  <ul>
    <li>Python</li>
    <li>Ruby</li>
    <li>PHP</li>
  </ul>

$(function() {
  // id属性がshowの要素がクリックされたら要素を表示
  $('#show').on('click', function(){
    $('ul').show();
  });

  // id属性がhideの要素がクリックされたら要素を非表示
  $('#hide').on('click', function(){
    $('ul').hide();
  });
});
-----------------------------------------------------------------

 $(function() {
   const p = $('p').text();
   console.log(p);
 });

append()	指定した要素内の末尾に追加する
prepend()	指定した要素内の先頭に追加する
after()	指定した要素の次に追加する
before()	指定した要素の前に追加する
